@page "/"
@rendermode InteractiveServer

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iniciar Sesión</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            min-height: 1vh;
            background: linear-gradient(#a2b8f4, #5271d3);
            /* background-image: url('https://img.freepik.com/free-vector/blue-copy-space-digital-background_23-2148821698.jpg?t=st=1725337519~exp=1725341119~hmac=35a659d27bb44112797a0eedd4f66c9581175a6ebf7ac31dd39d54e746257bfd&w=1380');
            background-size: cover;
            background-position: center; */
            font-family: 'Arial', sans-serif;
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            overflow: hidden;
        }

        .custom-placeholder::placeholder {
            color: white;
            opacity: 1;
        }
    </style>
</head>

<div class="flex items-center justify-center min-h-screen">
    <div class="bg-white bg-opacity-10 backdrop-blur-md p-8 rounded-lg shadow-lg w-96">
        <h2 class="text-3xl font-bold text-white mb-6 text-center">Iniciar Sesión</h2>
        <EditForm Model="@Login" OnValidSubmit="LoginClicked">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label class="block text-white text-sm font-bold mb-2">Correo</label>
                <div class="relative">
                    <InputText @bind-Value="Login.Email"
                               class="w-full p-3 text-white bg-transparent border-b-2 border-gray-300 focus:outline-none focus:border-white custom-placeholder"
                               placeholder="Correo" />
                    <i class="fas fa-envelope absolute right-3 top-2 text-white"></i>
                </div>
            </div>
            <div class="mb-4">
                <label class="block text-white text-sm font-bold mb-2">Contraseña</label>
                <div class="relative">
                    <InputText @bind-Value="Login.Password"
                               class="w-full p-3 text-white bg-transparent border-b-2 border-gray-300 focus:outline-none focus:border-white custom-placeholder"
                               placeholder="Contraseña" type="password" />
                    <i class="fas fa-lock absolute right-3 top-2 text-white"></i>
                </div>
            </div>
            @* <div class="flex items-center justify-end mb-6">
                <a class="inline-block align-baseline font-bold text-sm text-white hover:text-gray-300" href="#">Olvidé la contraseña</a>
            </div> *@
            <div class="mb-6">
                <button class="w-full bg-white text-gray-800 font-bold py-3 px-4 rounded-full hover:bg-gray-200 focus:outline-none focus:shadow-outline" type="submit">
                    Acceder
                </button>
            </div>
            @* <div class="text-center">
                <p class="text-white text-sm">No tengo cuenta <a class="font-bold hover:underline" href="register">Crear una</a></p>
            </div> *@
            <ValidationSummary />
        </EditForm>
    </div>
</div>

@* *******   LOADING   ******* *@
@if (Loading.showLoading)
{
    <div class="modal fade show bg-black bg-opacity-50" style="display: block">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex align-items-center start">
                        <div class="spinner-border" aria-hidden="true"></div>
                        <strong role="status" class="ps-3">@Loading.messageLoading</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@* <body class="flex items-center justify-center min-h-screen">
    <div class="bg-white bg-opacity-10 backdrop-blur-md p-8 rounded-lg shadow-lg w-96">
        <h2 class="text-3xl font-bold text-white mb-6 text-center">Iniciar Sesión</h2>
        <form>
            <div class="mb-4">
                <label class="block text-white text-sm font-bold mb-2" for="email">Email</label>
                <div class="relative">
                    <input class="w-full p-3 text-white bg-transparent border-b-2 border-gray-300 focus:outline-none focus:border-white" type="email" id="email" placeholder="Email">
                    <i class="fas fa-envelope absolute right-3 top-3 text-white"></i>
                </div>
            </div>
            <div class="mb-4">
                <label class="block text-white text-sm font-bold mb-2" for="password">Contraseña</label>
                <div class="relative">
                    <input class="w-full p-3 text-white bg-transparent border-b-2 border-gray-300 focus:outline-none focus:border-white" type="password" id="password" placeholder="Contraseña">
                    <i class="fas fa-lock absolute right-3 top-3 text-white"></i>
                </div>
            </div>
            <div class="flex items-center justify-content-end mb-6">
                <a class="inline-block align-baseline font-bold text-sm text-white hover:text-gray-300" href="#">Olvidé la contraseña</a>
            </div>
            <div class="mb-6">
                <button class="w-full bg-white text-gray-800 font-bold py-3 px-4 rounded-full hover:bg-gray-200 focus:outline-none focus:shadow-outline" type="button">Acceder</button>
            </div>
            <div class="text-center">
                <p class="text-white text-sm">No tengo cuenta <a class="font-bold hover:underline" href="#">Crear una</a></p>
            </div>
        </form>
    </div>
</body>
 *@

@* <div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Login</h2>
            <EditForm Model="@Login" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator/>
                <div class="form-group input">
                    <label class="form-label">Email Address</label>
                    <InputText @bind-Value="Login.Email" class="form-control"> </InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Password</label>
                    <InputText @bind-Value="Login.Password" class="form-control"> </InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
                <ValidationSummary/>
            </EditForm>
        </div>
    </div>
</div> *@

@code {
    public LoginDTO Login = new();

    protected override async Task OnInitializedAsync()
    {
        LoginResponse response = await accountService.LogoutAsync();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateNotAuthenticationState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var mensajeLogout = await sessionStorage.GetItemAsync<string>("logout");
            if (!string.IsNullOrEmpty(mensajeLogout))
            {
                await js.InvokeVoidAsync("alert", mensajeLogout);
                await sessionStorage.SetItemAsync("logout", "");
            }
        }
    }



    async Task LoginClicked()
    {
        Loading.Show();
        try
        {
            LoginResponse response = await accountService.LoginAsync(Login);
            if (!response.Flag)
            {
                Loading.Hide();
                await js.InvokeVoidAsync("alert", response.Message);
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
            await sessionStorage.SetItemAsync("cuenta", Login.Email);
            Loading.Hide();
            NavManager.NavigateTo("/home", forceLoad: true);
        }
        catch (Exception ex)
        {
            Loading.Hide();
            await js.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}
